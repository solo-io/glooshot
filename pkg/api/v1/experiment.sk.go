// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewExperiment(namespace, name string) *Experiment {
	experiment := &Experiment{}
	experiment.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return experiment
}

func (r *Experiment) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *Experiment) SetStatus(status core.Status) {
	r.Status = status
}

func (r *Experiment) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.Spec,
		r.Result,
	)
}

type ExperimentList []*Experiment

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list ExperimentList) Find(namespace, name string) (*Experiment, error) {
	for _, experiment := range list {
		if experiment.GetMetadata().Name == name {
			if namespace == "" || experiment.GetMetadata().Namespace == namespace {
				return experiment, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find experiment %v.%v", namespace, name)
}

func (list ExperimentList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, experiment := range list {
		ress = append(ress, experiment)
	}
	return ress
}

func (list ExperimentList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, experiment := range list {
		ress = append(ress, experiment)
	}
	return ress
}

func (list ExperimentList) Names() []string {
	var names []string
	for _, experiment := range list {
		names = append(names, experiment.GetMetadata().Name)
	}
	return names
}

func (list ExperimentList) NamespacesDotNames() []string {
	var names []string
	for _, experiment := range list {
		names = append(names, experiment.GetMetadata().Namespace+"."+experiment.GetMetadata().Name)
	}
	return names
}

func (list ExperimentList) Sort() ExperimentList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list ExperimentList) Clone() ExperimentList {
	var experimentList ExperimentList
	for _, experiment := range list {
		experimentList = append(experimentList, resources.Clone(experiment).(*Experiment))
	}
	return experimentList
}

func (list ExperimentList) Each(f func(element *Experiment)) {
	for _, experiment := range list {
		f(experiment)
	}
}

func (list ExperimentList) EachResource(f func(element resources.Resource)) {
	for _, experiment := range list {
		f(experiment)
	}
}

func (list ExperimentList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *Experiment) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

var _ resources.Resource = &Experiment{}

// Kubernetes Adapter for Experiment

func (o *Experiment) GetObjectKind() schema.ObjectKind {
	t := ExperimentCrd.TypeMeta()
	return &t
}

func (o *Experiment) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*Experiment)
}

var ExperimentCrd = crd.NewCrd("glooshot.solo.io",
	"experiments",
	"glooshot.solo.io",
	"v1",
	"Experiment",
	"exp",
	false,
	&Experiment{})
