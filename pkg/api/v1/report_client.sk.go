// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type ReportWatcher interface {
	// watch namespace-scoped Reports
	Watch(namespace string, opts clients.WatchOpts) (<-chan ReportList, <-chan error, error)
}

type ReportClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*Report, error)
	Write(resource *Report, opts clients.WriteOpts) (*Report, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (ReportList, error)
	ReportWatcher
}

type reportClient struct {
	rc clients.ResourceClient
}

func NewReportClient(rcFactory factory.ResourceClientFactory) (ReportClient, error) {
	return NewReportClientWithToken(rcFactory, "")
}

func NewReportClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ReportClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &Report{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base Report resource client")
	}
	return NewReportClientWithBase(rc), nil
}

func NewReportClientWithBase(rc clients.ResourceClient) ReportClient {
	return &reportClient{
		rc: rc,
	}
}

func (client *reportClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *reportClient) Register() error {
	return client.rc.Register()
}

func (client *reportClient) Read(namespace, name string, opts clients.ReadOpts) (*Report, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*Report), nil
}

func (client *reportClient) Write(report *Report, opts clients.WriteOpts) (*Report, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(report, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*Report), nil
}

func (client *reportClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *reportClient) List(namespace string, opts clients.ListOpts) (ReportList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToReport(resourceList), nil
}

func (client *reportClient) Watch(namespace string, opts clients.WatchOpts) (<-chan ReportList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	reportsChan := make(chan ReportList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				reportsChan <- convertToReport(resourceList)
			case <-opts.Ctx.Done():
				close(reportsChan)
				return
			}
		}
	}()
	return reportsChan, errs, nil
}

func convertToReport(resources resources.ResourceList) ReportList {
	var reportList ReportList
	for _, resource := range resources {
		reportList = append(reportList, resource.(*Report))
	}
	return reportList
}
