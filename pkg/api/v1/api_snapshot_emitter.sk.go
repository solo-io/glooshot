// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sync"
	"time"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"

	"github.com/solo-io/go-utils/errutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/errors"
)

var (
	mApiSnapshotIn  = stats.Int64("api.glooshot.solo.io/snap_emitter/snap_in", "The number of snapshots in", "1")
	mApiSnapshotOut = stats.Int64("api.glooshot.solo.io/snap_emitter/snap_out", "The number of snapshots out", "1")

	apisnapshotInView = &view.View{
		Name:        "api.glooshot.solo.io_snap_emitter/snap_in",
		Measure:     mApiSnapshotIn,
		Description: "The number of snapshots updates coming in",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	apisnapshotOutView = &view.View{
		Name:        "api.glooshot.solo.io/snap_emitter/snap_out",
		Measure:     mApiSnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(apisnapshotInView, apisnapshotOutView)
}

type ApiEmitter interface {
	Register() error
	Experiment() ExperimentClient
	Report() ReportClient
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *ApiSnapshot, <-chan error, error)
}

func NewApiEmitter(experimentClient ExperimentClient, reportClient ReportClient) ApiEmitter {
	return NewApiEmitterWithEmit(experimentClient, reportClient, make(chan struct{}))
}

func NewApiEmitterWithEmit(experimentClient ExperimentClient, reportClient ReportClient, emit <-chan struct{}) ApiEmitter {
	return &apiEmitter{
		experiment: experimentClient,
		report:     reportClient,
		forceEmit:  emit,
	}
}

type apiEmitter struct {
	forceEmit  <-chan struct{}
	experiment ExperimentClient
	report     ReportClient
}

func (c *apiEmitter) Register() error {
	if err := c.experiment.Register(); err != nil {
		return err
	}
	if err := c.report.Register(); err != nil {
		return err
	}
	return nil
}

func (c *apiEmitter) Experiment() ExperimentClient {
	return c.experiment
}

func (c *apiEmitter) Report() ReportClient {
	return c.report
}

func (c *apiEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *ApiSnapshot, <-chan error, error) {

	if len(watchNamespaces) == 0 {
		watchNamespaces = []string{""}
	}

	for _, ns := range watchNamespaces {
		if ns == "" && len(watchNamespaces) > 1 {
			return nil, nil, errors.Errorf("the \"\" namespace is used to watch all namespaces. Snapshots can either be tracked for " +
				"specific namespaces or \"\" AllNamespaces, but not both.")
		}
	}

	errs := make(chan error)
	var done sync.WaitGroup
	ctx := opts.Ctx
	/* Create channel for Experiment */
	type experimentListWithNamespace struct {
		list      ExperimentList
		namespace string
	}
	experimentChan := make(chan experimentListWithNamespace)
	/* Create channel for Report */
	type reportListWithNamespace struct {
		list      ReportList
		namespace string
	}
	reportChan := make(chan reportListWithNamespace)

	for _, namespace := range watchNamespaces {
		/* Setup namespaced watch for Experiment */
		experimentNamespacesChan, experimentErrs, err := c.experiment.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Experiment watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, experimentErrs, namespace+"-experiments")
		}(namespace)
		/* Setup namespaced watch for Report */
		reportNamespacesChan, reportErrs, err := c.report.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Report watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, reportErrs, namespace+"-reports")
		}(namespace)

		/* Watch for changes and update snapshot */
		go func(namespace string) {
			for {
				select {
				case <-ctx.Done():
					return
				case experimentList := <-experimentNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case experimentChan <- experimentListWithNamespace{list: experimentList, namespace: namespace}:
					}
				case reportList := <-reportNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case reportChan <- reportListWithNamespace{list: reportList, namespace: namespace}:
					}
				}
			}
		}(namespace)
	}

	snapshots := make(chan *ApiSnapshot)
	go func() {
		originalSnapshot := ApiSnapshot{}
		currentSnapshot := originalSnapshot.Clone()
		timer := time.NewTicker(time.Second * 1)
		sync := func() {
			if originalSnapshot.Hash() == currentSnapshot.Hash() {
				return
			}

			stats.Record(ctx, mApiSnapshotOut.M(1))
			originalSnapshot = currentSnapshot.Clone()
			sentSnapshot := currentSnapshot.Clone()
			snapshots <- &sentSnapshot
		}
		experimentsByNamespace := make(map[string]ExperimentList)
		reportsByNamespace := make(map[string]ReportList)

		for {
			record := func() { stats.Record(ctx, mApiSnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				close(snapshots)
				done.Wait()
				close(errs)
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case experimentNamespacedList := <-experimentChan:
				record()

				namespace := experimentNamespacedList.namespace

				// merge lists by namespace
				experimentsByNamespace[namespace] = experimentNamespacedList.list
				var experimentList ExperimentList
				for _, experiments := range experimentsByNamespace {
					experimentList = append(experimentList, experiments...)
				}
				currentSnapshot.Experiments = experimentList.Sort()
			case reportNamespacedList := <-reportChan:
				record()

				namespace := reportNamespacedList.namespace

				// merge lists by namespace
				reportsByNamespace[namespace] = reportNamespacedList.list
				var reportList ReportList
				for _, reports := range reportsByNamespace {
					reportList = append(reportList, reports...)
				}
				currentSnapshot.Reports = reportList.Sort()
			}
		}
	}()
	return snapshots, errs, nil
}
