syntax = "proto3";
package glooshot.solo.io;
option go_package = "github.com/solo-io/glooshot/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "github.com/solo-io/supergloo/api/v1/routing.proto";

/*
Describes an Experiment that GlooShot should run
*/
message Experiment {
    option (core.solo.io.resource).short_name = "exp";
    option (core.solo.io.resource).plural_name = "experiments";

    // the object metadata for this resource
    core.solo.io.Metadata metadata = 1 [(gogoproto.nullable) = false];

    // indicates whether or not the spec is valid
    // set by glooshot, intended to be read by clients
    core.solo.io.Status status = 3 [(gogoproto.nullable) = false];

    // configuration for the Experiment
    ExperimentSpec spec = 2;

    // the result of the experiment
    ExperimentResult result = 4 [(gogoproto.nullable) = false];
}

message ExperimentResult {
    enum State {
        // Experiment has not started
        Pending = 0;

        // Experiment started but threshold not met
        Started = 1;

        // Experiment failed, threshold was exceeded
        Failed = 2;

        // Experiment succeeded, duration elapsed
        // If duration is not specified, the Experiment will never
        // be marked Succeeded
        Succeeded = 3;
    }

    // the current state of the experiment as reported by glooshot
    State state = 1;

    // arbitrary data summarizing a failure in case one occurred
    map<string, string> failure_report = 2;

    // time the experiment was started
    google.protobuf.Timestamp time_started = 3 ;

    // the time the experiment completed
    google.protobuf.Timestamp time_finished = 4 ;
}

message ExperimentSpec {
    // decribes a single fault to  inject
    message InjectedFault {
        // if specified, the fault will only apply to requests sent from these services
        repeated core.solo.io.ResourceRef origin_services = 1;
        // if specified, the fault will only apply to requests sent to these services
        repeated core.solo.io.ResourceRef destination_services = 2;
        // the type of fault to inject
        supergloo.solo.io.FaultInjection fault = 3;
    }

    // the faults this experiment will inject
    // if empty, Glooshot will run a "control" experiment with no faults injected
    repeated InjectedFault faults = 4;

    // conditions on which to stop the experiment and mark it as failed
    // at least one must be specified
    repeated FailureCondition failure_conditions = 5;

    // the duration for which to run the experiment
    // if missing or set to 0 the experiment will run indefinitely
    // only Experiments with a timeout can succeed
    google.protobuf.Duration duration = 6 [(gogoproto.stdduration) = true];

    // The mesh to which the experiment will be applied. Must match a mesh.supergloo.solo.io CRD. If a cluster only has
    // a single mesh, this value is not needed, Glooshot will default to the only possible option.
    core.solo.io.ResourceRef target_mesh = 7;
}

// a condition based on an observed prometheus metric
message FailureCondition {
    // optional, a name for identifying the failure condition, must be unique
    // if not provided, will be generated from index
    string name = 1;
    // condition that will terminate the experiment
    message Trigger {
        oneof failure_trigger {
            // if HTTP GET returns non-200 status code, the condition was met
            string webhook_url = 1;

            // trigger a failure on observed prometheus metric
            PrometheusTrigger prometheus = 2;
        }
    }
    // the condition that will terminate the experiment
    Trigger trigger = 2;
}

message PrometheusTrigger {
    oneof query_type {
        // a user-specified query as an inline string
        string custom_query = 1;

        // query the success rate for a specific service
        SuccessRateQuery success_rate = 2;
    }

    // consider the failure condition met if the metric falls below this threshold
    double threshold_value = 3;

    // the comparison operator to use when comparing the threshold and observed metric values
    // if the comparison evaluates to true, the failure condition will be considered met
    // possible values are '==', '>', '<', '>=', and '<='
    // defaults to '<'
    string comparison_operator = 4;


    // returns the # of non-5XX requests / total requests for the given interval
    message SuccessRateQuery {
        // the service whose success rate Glooshot should monitor
        core.solo.io.ResourceRef service = 1;

        // the time interval over which the success rate should be measured
        // defaults to 1 minute
        google.protobuf.Duration interval = 6 [(gogoproto.stdduration) = true];
    }
}

// a snapshot of experiment metric values
message Report {
    option (core.solo.io.resource).short_name = "report";
    option (core.solo.io.resource).plural_name = "reports";

    // the object metadata for this resource
    core.solo.io.Metadata metadata = 1 [(gogoproto.nullable) = false];

    core.solo.io.Status status = 3 [(gogoproto.nullable) = false];

    // Name of the experiment this report pertains to
    core.solo.io.ResourceRef experiment = 4;

    message FailureConditionSnapshot {
        // return type for simple metrics queries
        double value = 1;
        // time that value was recorded
        google.protobuf.Timestamp timestamp = 2;
    }

    message FailureConditionHistory {
        // name of the corresponding failure condition
        // TODO - add name to spec, using array index for now
        string failure_condition_name = 1;
        // history of all measurements of the failure condition
        repeated FailureConditionSnapshot failure_condition_snapshots = 2;
    }

    // the measured values of each of the failure conditions at the time the report was captured
    repeated FailureConditionHistory failure_condition_history = 5;
}
